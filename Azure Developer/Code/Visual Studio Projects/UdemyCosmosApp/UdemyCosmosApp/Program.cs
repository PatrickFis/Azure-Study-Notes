using Microsoft.Azure.Cosmos;
using Newtonsoft.Json;
using UdemyCosmosApp;

string cosmosEndpointUri = "your URI here";
string cosmosDBKey = "your key here";
string databaseName = "appdb";
string containerName = "Orders";


// Orders code
//await CreateDatabase(databaseName);
//await CreateContainer(databaseName, containerName, "/category");
//await AddItem("O1", "Laptop", 100);
//await AddItem("O2", "Mobile", 200);
//await AddItem("O3", "Desktop", 75);
//await AddItem("O4", "Laptop", 25);
//await ReadItem();
//await ReplaceItem();
//await ReadItem();
//await DeleteItem("O1");
//await DeleteItem("O2");
//await DeleteItem("O3");
//await DeleteItem("O4");
//await ReadItem();

// Customers code
//await CreateContainer(databaseName, "Customers", "/customerCity");
//await AddCustomerItem("Customers", "C1", "CustomerA", "New York",
//    new List<Order>()
//    {
//        new Order
//        {
//            orderId = "O1",
//            category = "Laptop",
//            quantity = 100
//        },
//        new Order
//        {
//            orderId = "O3",
//            category = "Desktop",
//            quantity = 75
//        }
//    });
//await AddCustomerItem("Customers", "C2", "CustomerB", "Chicago",
//    new List<Order>()
//    {
//        new Order
//        {
//            orderId = "O2",
//            category = "Mobile",
//            quantity = 200
//        }
//    });
//await AddCustomerItem("Customers", "C3", "CustomerC", "Miami",
//    new List<Order>()
//    {
//        new Order
//        {
//            orderId = "O4",
//            category = "Laptop",
//            quantity = 25
//        }
//    });
//await ReadItemsFromContainer<Customer>("Customers");

// Stored procedure code
//await CallStoredProcedure("Orders", "createItems");

// Trigger code
//await CreateOrderItemWithTrigger("O1", "Laptop");

// Change feed processor code
await StartChangeProcessor();

// Create a new database using the provided name if it doesn't exist
async Task CreateDatabase(string databaseName)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);
    await cosmosClient.CreateDatabaseIfNotExistsAsync(databaseName);

    Console.WriteLine("Database created");
}

// Create a new container using the provided parameters if it doesn't exist
async Task CreateContainer(string databaseName, string containerName, string partitionKey)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);

    await database.CreateContainerIfNotExistsAsync(containerName, partitionKey);

    Console.WriteLine("Container created");
}

// Add an item to the orders container. Note that the ID of the item is generated by this method since it's required when using the SDK.
async Task AddItem(string orderId, string category, int quantity)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    Order order = new()
    {
        id = Guid.NewGuid().ToString(),
        orderId = orderId,
        category = category,
        quantity = quantity
    };

    ItemResponse<Order> response = await container.CreateItemAsync<Order>(order, new PartitionKey(category));

    Console.WriteLine($"Added item with Order ID {orderId}, Request Units {response.RequestCharge}");
}

// Create an order without a quantity to demo a trigger
async Task CreateOrderItemWithTrigger(string orderId, string category)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    Order order = new()
    {
        id = Guid.NewGuid().ToString(),
        orderId = orderId,
        category = category,
    };

    ItemResponse<Order> response = await container.CreateItemAsync<Order>(order, new PartitionKey(category), new ItemRequestOptions { PreTriggers = new List<string> { "validateItem" } });

    Console.WriteLine($"Added item with Order ID {orderId}, Request Units {response.RequestCharge}");
}

async Task AddCustomerItem(string containerName, string customerId, string customerName, string customerCity, List<Order> orders)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    Customer customer = new()
    {
        customerId = customerId,
        customerName = customerName,
        customerCity = customerCity,
        orders = orders
    };

    ItemResponse<Customer> response = await container.UpsertItemAsync<Customer>(customer, new PartitionKey(customerCity));
    Console.WriteLine($"Added customer with ID {customerId}, Request Units {response.RequestCharge}");
}

// Reads items from Cosmos and writes them to the console
async Task ReadItem()
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    string sqlQuery = "SELECT o.orderId, o.category, o.quantity FROM Orders o";

    QueryDefinition queryDefinition = new(sqlQuery);

    FeedIterator<Order> feedIterator = container.GetItemQueryIterator<Order>(queryDefinition);

    while(feedIterator.HasMoreResults)
    {
        FeedResponse<Order> feedResponse = await feedIterator.ReadNextAsync();
        foreach(Order order in feedResponse)
        {
            Console.WriteLine($"Order ID: {order.orderId}, Category: {order.category}, Quantity: {order.quantity}");
        }
    }
}

// Read an item from the specified container and write it to the console. 
async Task ReadItemsFromContainer<T>(string containerName)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    string sqlQuery = $"SELECT * FROM {containerName}";

    QueryDefinition queryDefinition = new(sqlQuery);

    FeedIterator<T> feedIterator = container.GetItemQueryIterator<T>(queryDefinition);

    while (feedIterator.HasMoreResults)
    {
        FeedResponse<T> feedResponse = await feedIterator.ReadNextAsync();
        foreach (var item in feedResponse)
        {
            Console.WriteLine(item);
        }
    }
}

// Replace the quantity of a specific item in the DB
async Task ReplaceItem()
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    string orderId = "O1";
    string sqlQuery = $"SELECT o.id, o.category FROM Orders o where o.orderId='{orderId}'";

    string id = "";
    string category = "";

    QueryDefinition queryDefinition = new(sqlQuery);

    FeedIterator<Order> feedIterator = container.GetItemQueryIterator<Order>(queryDefinition);

    while (feedIterator.HasMoreResults)
    {
        FeedResponse<Order> feedResponse = await feedIterator.ReadNextAsync();
        foreach (Order order in feedResponse)
        {
            id = order.id;
            category = order.category;
        }
    }

    ItemResponse<Order> response = await container.ReadItemAsync<Order>(id, new PartitionKey(category));

    var item = response.Resource;
    item.quantity = 150;
    await container.ReplaceItemAsync<Order>(item, id, new PartitionKey(category));

    Console.WriteLine("Item is updated");
}

// Delete a specific item from the DB
async Task DeleteItem(string orderId)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    string sqlQuery = $"SELECT o.id, o.category FROM Orders o where o.orderId='{orderId}'";

    string id = "";
    string category = "";

    QueryDefinition queryDefinition = new(sqlQuery);

    FeedIterator<Order> feedIterator = container.GetItemQueryIterator<Order>(queryDefinition);

    while (feedIterator.HasMoreResults)
    {
        FeedResponse<Order> feedResponse = await feedIterator.ReadNextAsync();
        foreach (Order order in feedResponse)
        {
            id = order.id;
            category = order.category;
        }
    }

    ItemResponse<Order> response = await container.ReadItemAsync<Order>(id, new PartitionKey(category));

    var item = response.Resource;
    await container.DeleteItemAsync<Order>(id, new PartitionKey(category));

    Console.WriteLine("Item is deleted");
}

// Call the specified stored procedure
async Task CallStoredProcedure(string containerName, string storedProcName)
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container container = database.GetContainer(containerName);

    dynamic[] orderItems = new dynamic[]
    {
        new
        {
            id = Guid.NewGuid().ToString(),
            orderId = "O1",
            category = "Laptop",
            quantity = 100
        },
        new
        {
            id = Guid.NewGuid().ToString(),
            orderId = "O2",
            category = "Laptop",
            quantity = 200
        },
                new
        {
            id = Guid.NewGuid().ToString(),
            orderId = "O3",
            category = "Laptop",
            quantity = 75
        }
    };

    var result = await container.Scripts.ExecuteStoredProcedureAsync<string>(storedProcName, new PartitionKey("Laptop"), new[] { orderItems });

    Console.WriteLine(result);
}

// Change feed methods. Note that they need a container named leases in Cosmos DB.
async Task StartChangeProcessor()
{
    CosmosClient cosmosClient = new(cosmosEndpointUri, cosmosDBKey);

    Database database = cosmosClient.GetDatabase(databaseName);
    Container leaseContainer = database.GetContainer("leases");

    ChangeFeedProcessor processor = cosmosClient.GetContainer(databaseName, containerName).GetChangeFeedProcessorBuilder<Order>(processorName: "ManageChanges", onChangesDelegate: ManageChanges).WithInstanceName("appHost").WithLeaseContainer(leaseContainer).Build();

    Console.WriteLine("Starting the Change Feed Processor");
    await processor.StartAsync();
    Console.Read();
    await processor.StopAsync();
}

static async Task ManageChanges(ChangeFeedProcessorContext context, IReadOnlyCollection<Order> itemCollection, CancellationToken cancellationToken)
{
    foreach(Order item in itemCollection)
    {
        Console.WriteLine(item);
    }
}